{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/metadata.ts","../src/internal.ts","../src/mint.ts","../src/nft_core.ts","../src/enumeration.ts","../src/approval.ts","../src/royalty.ts","../src/nft.ts"],"sourcesContent":["export var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from '@scure/base';\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nfunction data_len(c) {\n    switch (c) {\n        case CurveType.ED25519:\n            return 32;\n        case CurveType.SECP256K1:\n            return 64;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction split_key_type_data(value) {\n    let idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [curveTypeFromStr(value.substring(0, idx)), value.substring(idx + 1)];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length) {\n        super(`Invalid length: ${length}`);\n        this.length = length;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\nexport class PublicKey {\n    constructor(data) {\n        this.data = data;\n        let curve_type = data.charCodeAt(0);\n        let curve_len = data_len(curve_type);\n        if (data.length != curve_len + 1) {\n            throw new InvalidLengthError(data.length);\n        }\n        this.data = data;\n    }\n    curveType() {\n        return this.data.charCodeAt(0);\n    }\n    static fromString(s) {\n        let [curve, key_data] = split_key_type_data(s);\n        let data;\n        try {\n            data = bytes(base58.decode(key_data));\n        }\n        catch (err) {\n            throw new Base58Error(err.message);\n        }\n        return new PublicKey(String.fromCharCode(curve) + data);\n    }\n}\n","import { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else {\n        throw Error(`Promise result ${status == PromiseResult.Failed ? \"Failed\" :\n            status == PromiseResult.NotReady ? \"NotReady\" : status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport function initialize({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function call({ privateFunction = false, payableFunction = false }) {\n    return function (target, key, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            if (privateFunction && near.predecessorAccountId() !== near.currentAccountId()) {\n                throw Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > BigInt(0)) {\n                throw Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function view({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function NearBindgen({ requireInit = false }) {\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(obj) {\n                near.storageWrite(\"STATE\", this._serialize(obj));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value) {\n                return JSON.stringify(value);\n            }\n            static _deserialize(value) {\n                return JSON.parse(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    if (classObject[item].constructor?.deserialize !== undefined) {\n                        classObject[item] = classObject[item].constructor.deserialize(plainObject[item]);\n                    }\n                    else {\n                        classObject[item] = plainObject[item];\n                    }\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.length) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(prefix + 'u'); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(prefix + 'm');\n    }\n    get length() {\n        let keysLen = this.keys.length;\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        return keysIsEmpty;\n    }\n    get(key) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return null;\n        }\n        let value = valueAndIndex[0];\n        return value;\n    }\n    set(key, value) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex !== null) {\n            let oldValue = valueAndIndex[0];\n            valueAndIndex[0] = value;\n            this.values.set(key, valueAndIndex);\n            return oldValue;\n        }\n        let nextIndex = this.length;\n        this.keys.push(key);\n        this.values.set(key, [value, nextIndex]);\n        return null;\n    }\n    remove(key) {\n        let oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return null;\n        }\n        let index = oldValueAndIndex[1];\n        if (this.keys.swapRemove(index) === null) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (this.keys.length > 0 && index != this.keys.length) {\n            // if there is still elements and it was not the last element\n            let swappedKey = this.keys.get(index);\n            let swappedValueAndIndex = this.values.get(swappedKey);\n            if (swappedValueAndIndex === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return oldValueAndIndex[0];\n    }\n    clear() {\n        for (let key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"u\");\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(data.prefix + \"m\");\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        let key = this.keys.next();\n        let value;\n        if (!key.done) {\n            value = this.map.get(key.value);\n            if (value === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return { value: [key.value, value ? value[0] : value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction serializeIndex(index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    let array = bytesToU8Array(rawIndex);\n    let data = new Uint32Array(array.buffer);\n    return data[0];\n}\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    get length() {\n        return this.elements.length;\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.length;\n            let nextIndexRaw = serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.length == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.length - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \"./nft\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            spec,\n            name,\n            symbol,\n            icon,\n            baseUri,\n            reference,\n            referenceHash\n        }: {\n            spec: string,\n            name: string,\n            symbol: string,\n            icon?: string,\n            baseUri?: string,\n            reference?: string,\n            referenceHash?: string\n        }) {\n        this.spec = spec  // required, essentially a version like \"nft-1.0.0\"\n        this.name = name  // required, ex. \"Mosaics\"\n        this.symbol = symbol // required, ex. \"MOSAIC\"\n        this.icon = icon // Data URL\n        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference // URL to a JSON file with more info\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title,\n            description,\n            media,\n            mediaHash,\n            copies,\n            issuedAt,\n            expiresAt,\n            startsAt,\n            updatedAt,\n            extra,\n            reference,\n            referenceHash\n        }: {\n            title?: string,\n            description?: string,\n            media?: string,\n            mediaHash?: string,\n            copies?: number,\n            issuedAt?: string,\n            expiresAt?: string,\n            startsAt?: string,\n            updatedAt?: string,\n            extra?: string,\n            reference?: string,\n            referenceHash?: string\n        }\n    ) {\n        this.title = title // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description // free-form description\n        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt // ISO 8601 datetime when token expires\n        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated\n        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n    royalty: { [accountId: string]: number };\n\n    constructor({\n        ownerId,\n        approvedAccountIds,\n        nextApprovalId,\n        royalty\n    }: {\n        ownerId: string,\n        approvedAccountIds: { [accountId: string]: number },\n        nextApprovalId: number,\n        royalty: { [accountId: string]: number }\n    }) {\n        //owner of the token\n        this.owner_id = ownerId,\n            //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n            this.approved_account_ids = approvedAccountIds,\n            //the next approval ID to give out. \n            this.next_approval_id = nextApprovalId,\n            //keep track of the royalty percentages for the token in a hash map\n            this.royalty = royalty\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n\n    constructor({\n        tokenId,\n        ownerId,\n        metadata,\n        approvedAccountIds,\n        royalty\n    }: {\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n        approvedAccountIds: { [accountId: string]: number },\n        royalty: { [accountId: string]: number }\n    }) {\n        //token ID\n        this.token_id = tokenId,\n            //owner of the token\n            this.owner_id = ownerId,\n            //token metadata\n            this.metadata = metadata,\n            //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n            this.approved_account_ids = approvedAccountIds,\n            //keep track of the royalty percentages for the token in a hash map\n            this.royalty = royalty\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}: {\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { Token } from \"./metadata\";\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(royaltyPercentage: number, amountToPay: bigint): string {\n    return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. \nexport function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {\n    //get the storage total by going through and summing all the bytes for each approved account IDs\n    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();\n\n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer)\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {\n    //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//refund the initial deposit based on the amount of storage that was used up\nexport function refundDeposit(storageUsed: bigint) {\n    //get how much it would cost to store the information\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    //get the attached deposit\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    //make sure that the attached deposit is greater than or equal to the required cost\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    //get the refund amount from the attached deposit - required cost\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n    if (refund > 1) {\n        // Send the money to the beneficiary (TODO: don't use batch actions)\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n    return accountId.length + 4 + 8;\n}\n\n//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)\nexport function assertAtLeastOneYocto() {\n    assert(near.attachedDeposit().valueOf() >= BigInt(1), \"Requires attached deposit of at least 1 yoctoNEAR\");\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if (tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID. \n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    //we get the set of tokens that the owner has\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there is no set of tokens for the owner, we panic with the following message:\n    assert(tokenSet !== null, \"Token should be owned by the sender\")\n\n    //we remove the the token_id from the set of tokens\n    tokenSet.remove(tokenId)\n\n    //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else { //if the token set is not empty, we simply insert it back for the account ID. \n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {\n    //get the token object by passing in the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token found\")\n\n    //if the sender doesn't equal the owner, we check if the sender is in the approval list\n    if (senderId != token.owner_id) {\n        //if the token's approved account IDs doesn't contain the sender, we panic\n        assert(token.approved_account_ids.hasOwnProperty(senderId), \"Unauthorized\")\n\n        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n        if (approvalId != null) {\n            //get the actual approval ID\n            let actualApprovalId = token.approved_account_ids[senderId];\n            //if the sender isn't in the map, we panic\n            assert(actualApprovalId !== null, \"Sender is not approved account\")\n\n\n            //make sure that the actual approval ID is the same as the one provided\n            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);\n        }\n    }\n\n    //we make sure that the sender isn't sending the token to themselves\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    //we remove the token from it's current owner's set\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    //we then add the token to the receiver_id's set\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    //we create a new token struct \n    let newToken = new Token({\n        ownerId: receiverId,\n        //reset the approval account IDs\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n        //we copy over the royalties from the previous token\n        royalty: token.royalty,\n    });\n\n    //insert that new token into the tokens_by_id, replacing the old entry \n    contract.tokensById.set(tokenId, newToken);\n\n    //if there was some memo attached, we log it. \n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    // Default the authorized ID to be None for the logs.\n    let authorizedId;\n\n    //if the approval ID was provided, set the authorized ID equal to the sender\n    if (approvalId != null) {\n        authorizedId = senderId\n    }\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: token.owner_id,\n                // The account ID of the new owner of the token.\n                new_owner_id: receiverId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return the previous token object that was transferred.\n    return token\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId,\n    perpetualRoyalties\n}: {\n    contract: Contract,\n    tokenId: string,\n    metadata: TokenMetadata,\n    receiverId: string\n    perpetualRoyalties: { [key: string]: number }\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    // create a royalty map to store in the token\n    let royalty: { [accountId: string]: number } = {}\n\n    // if perpetual royalties were passed into the function: TODO: add isUndefined fn\n    if (perpetualRoyalties != null) {\n        //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people\n        assert(Object.keys(perpetualRoyalties).length < 7, \"Cannot add more than 6 perpetual royalty amounts\");\n\n        //iterate through the perpetual royalties and insert the account and amount in the royalty map\n        Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {\n            royalty[account] = amount;\n        });\n    }\n\n    //specify the token struct that contains the owner ID \n    let token = new Token({\n        //set the owner ID equal to the receiver ID passed into the function\n        ownerId: receiverId,\n        //we set the approved account IDs to the default value (an empty map)\n        approvedAccountIds: {},\n        //the next approval ID is set to 0\n        nextApprovalId: 0,\n        //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)\n        royalty,\n    });\n\n    //insert the token ID and token struct and make sure that the token doesn't exist\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    contract.tokensById.set(tokenId, token)\n\n    //insert the token ID and metadata\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    //call the internal method for adding the token to the owner\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            }\n        ]\n    }\n\n    // Log the json.\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n    //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}: {\n    contract: Contract,\n    tokenId: string\n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    //if there wasn't a token ID in the tokens_by_id collection, we return None\n    if (token == null) {\n        return null;\n    }\n\n    //if there is some token ID in the tokens_by_id collection\n    //we'll get the metadata for that token\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n\n    //we return the JsonToken\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n        approvedAccountIds: token.approved_account_ids,\n        royalty: token.royalty\n    });\n    return jsonToken;\n}\n\n//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}: {\n    contract: Contract,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number\n    memo: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //we refund the owner for releasing the storage used up by the approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\n//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}: {\n    contract: Contract,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    msg: string\n}) {\n    //assert that the user attached exactly 1 yocto for security reasons. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    // Initiating receiver's call and the callback\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"nft_on_transfer\",\n        bytes(JSON.stringify({\n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })),\n        0, // no deposit \n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    // We then resolve the promise and call nft_resolve_transfer on our own contract\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"nft_resolve_transfer\",\n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })),\n        0, // no deposit \n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\n//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n//returns true if the token was successfully transferred to the receiver_id\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}: {\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string\n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`\n    // call result.\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not\n        //if we need don't need to return the token, we simply return true meaning everything went fine\n        if (result === 'false') {\n            /* \n                since we've already transferred the token and nft_on_transfer returned false, we don't have to \n                revert the original transfer and thus we can just return true since nothing went wrong.\n            */\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    //get the token object if there is some token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            // The token is not owner by the receiver anymore. Can't return it.\n            return true;\n        }\n        //if there isn't a token object, it was burned and so we return true\n    } else {\n        //we refund the owner for releasing the storage used up by the approved account IDs\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    //we remove the token from the receiver\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    //we add the token to the original owner\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    //we change the token struct's owner to be the original owner \n    token.owner_id = ownerId\n\n    //we refund the receiver any approved account IDs that they may have set on the token\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    //reset the approved account IDs to what they were before the transfer\n    token.approved_account_ids = approvedAccountIds;\n\n    //we inset the token b  ack into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    /*\n        We need to log that the NFT was reverted back to the original owner.\n        The old_owner_id will be the receiver and the new_owner_id will be the\n        original owner of the token since we're reverting the transfer.\n    */\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: receiverId,\n                // The account ID of the new owner of the token.\n                new_owner_id: ownerId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return false\n    return false\n}","// @ts-nocheck\nimport { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract\n}: {\n    contract: Contract\n}): number {\n    // return the length of the token metadata by ID\n    return contract.tokenMetadataById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    fromIndex?: string,\n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({ contract, tokenId: keys[i][0] });\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}: {\n    contract: Contract,\n    accountId: string\n}): number {\n    //get the set of tokens for the passed in owner\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0\n    }\n\n    //if there is some set of tokens, we'll return the length \n    return tokens.len();\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    accountId: string,\n    fromIndex?: string,\n    limit?: number\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for (let i = start; i < max; i++) {\n        if (i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({ contract, tokenId: keys[i] });\n        tokens.push(token);\n    }\n    return tokens;\n}","// @ts-nocheck\nimport { assert, bytes, near, panic } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\n//approve an account ID to transfer a token on your behalf\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}: {\n    contract: Contract,\n    tokenId: string,\n    accountId: string,\n    msg: string\n}) {\n    /*\n        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.\n        The user needs to attach enough to pay for storage on the contract\n    */\n    assertAtLeastOneYocto();\n\n    //get the token object from the token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token\")\n\n    //make sure that the person calling the function is the owner of the token\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    //get the next approval ID if we need a new approval\n    let approvalId = token.next_approval_id;\n\n    //check if the account has been approved already for this token\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    //if it was a new approval, we need to calculate how much storage is being used to add the account.\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    //increment the token's next approval ID by 1\n    token.next_approval_id += 1;\n    //insert the token back into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    //refund any excess storage attached by the user. If the user didn't attach enough, panic. \n    refundDeposit(BigInt(storageUsed));\n\n    //if some message was passed into the function, we initiate a cross contract call on the\n    //account we're giving access to. \n    if (msg != null) {\n        // Initiating receiver's call and the callback\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise,\n            \"nft_on_approve\",\n            bytes(JSON.stringify({\n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })),\n            0, // no deposit \n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\n//check if the passed in account has access to approve the token ID\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}: {\n    contract: Contract,\n    tokenId: string,\n    approvedAccountId: string,\n    approvalId: number\n}) {\n    //get the token object from the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token\")\n\n\n    //get the approval number for the passed in account ID\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    //if there was no approval ID found for the account ID, we simply return false\n    if (approval == null) {\n        return false\n    }\n\n    //if there was some approval ID found for the account ID\n    //if there was no approval_id passed into the function, we simply return true\n    if (approvalId == null) {\n        return true\n    }\n\n    //if a specific approval_id was passed into the function\n    //return if the approval ID passed in matches the actual approval ID for the account\n    return approvalId == approval;\n}\n\n//revoke a specific account from transferring the token on your behalf\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}: {\n    contract: Contract,\n    tokenId: string,\n    accountId: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR for security reasons\n    assertOneYocto();\n\n    //get the token object using the passed in token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token\")\n\n\n    //get the caller of the function and assert that they are the owner of the token\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //if the account ID was in the token's approval, we remove it\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n\n        //refund the funds released by removing the approved_account_id to the caller of the function\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n\n        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\n//revoke all accounts from transferring the token on your behalf\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}: {\n    contract: Contract,\n    tokenId: string\n}) {\n    //assert that the caller attached exactly 1 yoctoNEAR for security\n    assertOneYocto();\n\n    //get the token object from the passed in token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token\")\n\n\n    //get the caller and make sure they are the owner of the tokens\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //only revoke if the approved account IDs for the token is not empty\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        //refund the approved account IDs to the caller of the function\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        //clear the approved account IDs\n        token.approved_account_ids = {};\n        //insert the token back into the tokens_by_id collection with the approved account IDs cleared\n        contract.tokensById.set(tokenId, token);\n    }\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./nft\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, internalTransfer, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter, royaltyToPayout } from \"./internal\";\nimport { Token } from \"./metadata\";\n\n//calculates the payout for a token given the passed in balance. This is a view method\nexport function internalNftPayout({\n    contract,\n    tokenId,\n    balance,\n    maxLenPayout\n}: {\n    contract: Contract,\n    tokenId: string,\n    balance: bigint,\n    maxLenPayout: number,\n}): { payout: { [key: string]: string } } {\n    //get the token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    assert(token !== null, \"no token\")\n\n\n    //get the owner of the token\n    let ownerId = token.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    //get the royalty object from token\n    let royalty = token.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n\n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}\n\n//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \nexport function internalNftTransferPayout({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    balance,\n    maxLenPayout\n}: {\n    contract: Contract,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    balance: bigint,\n    maxLenPayout: number,\n}): { payout: { [key: string]: string } } {\n    //assert that the user attached 1 yocto NEAR for security reasons\n    assertOneYocto();\n    //get the sender ID\n    let senderId = near.predecessorAccountId();\n    //transfer the token to the passed in receiver and get the previous token object back\n    let previousToken: Token = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //refund the previous token owner for the storage used up by the previous approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids,\n    );\n\n    //get the owner of the token\n    let ownerId = previousToken.owner_id;\n    //keep track of the total perpetual royalties\n    let totalPerpetual = 0;\n    //keep track of the payout object to send back\n    let payoutObj: { [key: string]: string } = {};\n    //get the royalty object from token\n    let royalty = previousToken.royalty;\n\n    //make sure we're not paying out to too many people (GAS limits this)\n    assert(Object.keys(royalty).length <= maxLenPayout, \"Market cannot payout to that many receivers\");\n\n    //go through each key and value in the royalty object\n    Object.entries(royalty).forEach(([key, value], index) => {\n        //only insert into the payout if the key isn't the token owner (we add their payout at the end)\n        if (key != ownerId) {\n            payoutObj[key] = royaltyToPayout(value, balance);\n            totalPerpetual += value;\n        }\n    });\n\n    // payout to previous owner who gets 100% - total perpetual royalties\n    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);\n\n    //return the payout object\n    return {\n        payout: payoutObj\n    }\n}","\nimport { NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, initialize } from 'near-sdk-js'\nimport { NFTContractMetadata, Token, TokenMetadata, internalNftMetadata } from './metadata';\nimport { internalMint } from './mint';\nimport { internalNftTokens, internalSupplyForOwner, internalTokensForOwner, internalTotalSupply } from './enumeration';\nimport { internalNftToken, internalNftTransfer, internalNftTransferCall, internalResolveTransfer } from './nft_core';\nimport { internalNftApprove, internalNftIsApproved, internalNftRevoke, internalNftRevokeAll } from './approval';\nimport { internalNftPayout, internalNftTransferPayout } from './royalty';\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen({ requireInit: true })\nexport class Contract {\n    owner_id: string = \"\";\n    tokensPerOwner: LookupMap = new LookupMap(\"tokensPerOwner\");\n    tokensById: LookupMap = new LookupMap(\"tokensById\");\n    tokenMetadataById: UnorderedMap = new UnorderedMap('tokenMetadataById');\n    metadata: NFTContractMetadata;\n\n    /*\n        initialization function (can only be called once).\n        this initializes the contract with metadata that was passed in and\n        the owner_id. \n    */\n    @initialize({ privateFunction: true })\n    init({\n        owner_id,\n        metadata\n    }) {\n\n        this.owner_id = owner_id;\n        // this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n        // this.tokensById = new LookupMap(\"tokensById\");\n        // this.tokenMetadataById = new UnorderedMap(\"tokenMetadataById\");\n        this.metadata = metadata;\n    }\n\n    /*\n        MINT\n    */\n    @call({ payableFunction: true })\n    nft_mint({ token_id, metadata, receiver_id, perpetual_royalties }) {\n        return internalMint({ contract: this, tokenId: token_id, metadata: metadata, receiverId: receiver_id, perpetualRoyalties: perpetual_royalties });\n    }\n\n    /*\n        CORE\n    */\n    //get the information for a specific token ID\n    @view({})\n    nft_token({ token_id }) {\n        return internalNftToken({ contract: this, tokenId: token_id });\n    }\n\n    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \n    @call({ payableFunction: true })\n    nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n        return internalNftTransfer({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo });\n    }\n\n    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\n    @call({})\n    nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n        return internalNftTransferCall({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, msg: msg });\n    }\n\n    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n    @call({})\n    //returns true if the token was successfully transferred to the receiver_id\n    nft_resolve_transfer({ authorized_id, owner_id, receiver_id, token_id, approved_account_ids, memo }) {\n        return internalResolveTransfer({ contract: this, authorizedId: authorized_id, ownerId: owner_id, receiverId: receiver_id, tokenId: token_id, approvedAccountIds: approved_account_ids, memo: memo });\n    }\n\n    /*\n        APPROVALS\n    */\n    //check if the passed in account has access to approve the token ID\n    @view({})\n    nft_is_approved({ token_id, approved_account_id, approval_id }) {\n        return internalNftIsApproved({ contract: this, tokenId: token_id, approvedAccountId: approved_account_id, approvalId: approval_id });\n    }\n\n    //approve an account ID to transfer a token on your behalf\n    @call({})\n    nft_approve({ token_id, account_id, msg }) {\n        return internalNftApprove({ contract: this, tokenId: token_id, accountId: account_id, msg: msg });\n    }\n\n    /*\n        ROYALTY\n    */\n    //calculates the payout for a token given the passed in balance. This is a view method\n    @view({})\n    nft_payout({ token_id, balance, max_len_payout }) {\n        return internalNftPayout({ contract: this, tokenId: token_id, balance: balance, maxLenPayout: max_len_payout });\n    }\n\n    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \n    @call({})\n    nft_transfer_payout({ receiver_id, token_id, approval_id, memo, balance, max_len_payout }) {\n        return internalNftTransferPayout({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, balance: balance, maxLenPayout: max_len_payout });\n    }\n\n    //approve an account ID to transfer a token on your behalf\n    @call({})\n    nft_revoke({ token_id, account_id }) {\n        return internalNftRevoke({ contract: this, tokenId: token_id, accountId: account_id });\n    }\n\n    //approve an account ID to transfer a token on your behalf\n    @call({})\n    nft_revoke_all({ token_id }) {\n        return internalNftRevokeAll({ contract: this, tokenId: token_id });\n    }\n\n    /*\n        ENUMERATION\n    */\n    //Query for the total supply of NFTs on the contract\n    @view({})\n    nft_total_supply() {\n        return internalTotalSupply({ contract: this });\n    }\n\n    //Query for nft tokens on the contract regardless of the owner using pagination\n    @view({})\n    nft_tokens({ from_index, limit }) {\n        return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });\n    }\n\n    //get the total supply of NFTs for a given owner\n    @view({})\n    nft_tokens_for_owner({ account_id, from_index, limit }) {\n        return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n    }\n\n    //Query for all the tokens for an owner\n    @view({})\n    nft_supply_for_owner({ account_id }) {\n        return internalSupplyForOwner({ contract: this, accountId: account_id });\n    }\n\n    /*\n        METADATA\n    */\n    //Query for all the tokens for an owner\n    @view({})\n    nft_metadata() {\n        return internalNftMetadata({ contract: this });\n    }\n}"],"names":["PromiseResult","PromiseError","u8ArrayToBytes","array","ret","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","Error","str","assert","b","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","c","encode","Array","from","reverse","reduce","acc","undefined","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","Object","keys","CurveType","U64_MAX","EVICTED_REGISTER","log","params","env","x","JSON","stringify","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","storageRead","key","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","storageUsage","storage_usage","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","initialize","target","descriptor","call","privateFunction","payableFunction","originalMethod","near","BigInt","view","NearBindgen","requireInit","_create","_getState","rawState","_deserialize","_saveToStorage","obj","_serialize","_getArgs","parse","_reconstruct","classObject","plainObject","item","constructor","deserialize","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","serialize","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","clear","toArray","vector","current","next","UnorderedMap","values","keysLen","keysIsEmpty","valueAndIndex","oldValue","nextIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","kvs","k","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","indexLookup","nextIndexRaw","indexRaw","lastElement","lastLookupElement","Token","ownerId","approvedAccountIds","nextApprovalId","royalty","owner_id","approved_account_ids","next_approval_id","JsonToken","tokenId","metadata","token_id","internalNftMetadata","contract","restoreOwners","collection","royaltyToPayout","royaltyPercentage","amountToPay","toString","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","partialSum","amountToTransfer","valueOf","promise","refundApprovedAccountIds","refundDeposit","storageUsed","requiredCost","refund","assertAtLeastOneYocto","assertOneYocto","internalAddTokenToOwner","tokenSet","tokensPerOwner","internalRemoveTokenFromOwner","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalMint","perpetualRoyalties","initialStorageUsage","entries","account","tokenMetadataById","nftMintLog","requiredStorageInBytes","GAS_FOR_RESOLVE_TRANSFER","GAS_FOR_NFT_ON_TRANSFER","internalNftToken","jsonToken","internalNftTransfer","previousToken","internalNftTransferCall","msg","sender_id","previous_owner_id","receiver_id","internalResolveTransfer","result","internalTotalSupply","internalNftTokens","fromIndex","tokens","start","parseInt","max","internalSupplyForOwner","internalTokensForOwner","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","isNewApproval","approval_id","internalNftIsApproved","approvedAccountId","approval","internalNftRevoke","internalNftRevokeAll","getPrototypeOf","prototype","internalNftPayout","balance","maxLenPayout","totalPerpetual","payoutObj","payout","internalNftTransferPayout","Contract","init","nft_mint","perpetual_royalties","nft_token","nft_transfer","nft_transfer_call","nft_resolve_transfer","nft_is_approved","approved_account_id","nft_approve","account_id","nft_payout","max_len_payout","nft_transfer_payout","nft_revoke","nft_revoke_all","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","nft_metadata"],"mappings":"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"}